#!/bin/bash -e

# IMPORTANT: Source RVM as a function into local environment.
#            Otherwise switching gemsets won't work.
# Also if RVM is not present, it fails.
echo "Ubuntu Packages"
sudo apt update
sudo apt -y install gridsite-clients gnupg2 git-core build-essential postgresql postgresql-contrib libpq-dev libcurl4-gnutls-dev
gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
\curl -sSL https://get.rvm.io | bash -s stable --rails
echo rvm_autoupdate_flag=2 > ~/.rvmrc
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
echo "Checking OS dependencies"
echo "Node, NVM, AVN and YARN"
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
nvm ls-remote --lts|grep Latest # To list all available LTS node releases
nvm install --lts
npm install --global yarn # to handle JS dependencies in rails projects, may be used with --global
npm install -g avn avn-nvm avn-n # To automatically manage .node-version files in main rails container for Thecore Apps
avn setup

echo "PostgreSQL"
sudo sed -r -i 's/^(local\s+all\s+all\s+)peer$/\1md5/gm' /etc/postgresql/*/main/pg_hba.conf
sudo service postgresql restart

choose () {
    echo -e "\e[33mPlease type the number of the choice.\e[0m"
    select CHOICE in "${OPTIONS[@]}"; do
        # $opt being empty signals invalid input.
        [[ -n $CHOICE ]] || { echo "Invalid option, please try again typing the number of the choice." >&2; continue; }
        break # a valid choice was made, exit the prompt.
    done
}

echo "Please enter app's name:" 
read -r FULLNAME
if [[ "$FULLNAME" =~ ^[a-z0-9_]+$ ]]
then
    echo "Creating a generic app" 
    if [ -e "$FULLNAME" ]
    then
        echo "ERROR! The directory already exists, please think about another name and re-run this script." 
        exit 1
    fi

    # TODO: Check on template necessity can this wizard be completely driven only 
    # by this shell script?
    #  -m 'https://raw.githubusercontent.com/gabrieletassoni/thecore_setup_templates/master/new_thecore_app.rb' 

    # Create arguments (optional and mandatory)
    args=( )
    # Ask for type of database needed
    echo "Which database will be used by the app?"
    echo -e "\e[31mBe sure to have the correct libraries (drivers/clients) installed in the Operative System.\e[0m"
    OPTIONS=("mysql" "postgresql" "sqlite3" "oracle" "frontbase" "ibm_db" "sqlserver" "jdbcmysql" "jdbcsqlite3" "jdbcpostgresql" "jdbc")
    choose
    DB_TYPE=$CHOICE
    args+=( --database "$DB_TYPE" )

    # Ask for local or remote DB
    echo "Is the database local or remote to this server?"
    OPTIONS=("local" "remote")
    choose
    DB_LOCATION=$CHOICE

    # Ask for type of aplication needed
    echo "Which kind of Thecore App would you like to create?"
    OPTIONS=("api" "backend" "both")
    choose
    APPLICATION_TYPE="$CHOICE"
    if [[ "$APPLICATION_TYPE" == "api" ]]
    then
        args+=( --api )
    fi

    # Actually run the selected Thecore application type
    rails new "$FULLNAME" "${args[@]}"

    echo "Is the Database already existing?"
    OPTIONS=("yes" "no")
    choose
    if [[ $CHOICE == "yes" ]]
    then
        echo "Please provide the connection string for the existing Database."
        echo "The format may look like these:"
        echo "- postgres://localhost/thecore_db?pool=5"
        echo "- mysql2://root:password@127.0.0.1/thecore_db?pool=5"
        echo "- sqlite3::memory:"
        echo -e "\e[31mThe database must be already up and running and reachable by this installation.\e[0m"
        STOPLOOP=false
        while $STOPLOOP
        do
            read -r
            echo "Is the connection string $REPLY correct?"
            OPTIONS=("yes" "no")
            choose
            if [[ $CHOICE == "yes" ]]
            then
                DB_CONNECTION_STRING_TEST="${REPLY}"
                DB_CONNECTION_STRING_DEV="${REPLY}"
                DB_CONNECTION_STRING_PROD="${REPLY}"
                STOPLOOP=true
            fi
        done
    else
        echo "For local postgresql Databases I can try to setup the DB for you. Otherwise you need to create it by yourself and provide the connection string restarting this installation script again."
        if [[ $DB_LOCATION == "local" ]] && [[ $DB_TYPE == "postgresql" ]]
        then
            echo "Please provide sudo password."
            sudo id
            # CLEANUPS
            sudo -u postgres -- dropdb --if-exists "${FULLNAME}_development" # Dev
            sudo -u postgres -- dropdb --if-exists "${FULLNAME}_test" # Test
            sudo -u postgres -- dropdb --if-exists "${FULLNAME}" # Prod
            sudo -u postgres -- dropuser --if-exists "${FULLNAME}"
            # CREATIONS
            sudo -u postgres createuser -d "${FULLNAME}"
            sudo -u postgres psql -c "alter user ${FULLNAME} with encrypted password '${FULLNAME}';"
            sudo -u postgres createdb -O "${FULLNAME}" "${FULLNAME}" 
            sudo -u postgres createdb -O "${FULLNAME}" "${FULLNAME}_development" 
            sudo -u postgres createdb -O "${FULLNAME}" "${FULLNAME}_test"

            DB_CONNECTION_STRING_TEST="postgres://${FULLNAME}:${FULLNAME}@localhost/${FULLNAME}_test?pool=5"
            DB_CONNECTION_STRING_DEV="postgres://${FULLNAME}:${FULLNAME}@localhost/${FULLNAME}_development?pool=5"
            DB_CONNECTION_STRING_PROD="postgres://${FULLNAME}:${FULLNAME}@localhost/${FULLNAME}?pool=5"     
        fi
    fi

    cat <<EOF | tee "${FULLNAME}/config/database.yml"
development:
  url: ${DB_CONNECTION_STRING_DEV}

test:
  url: ${DB_CONNECTION_STRING_TEST}

production:
  url: ${DB_CONNECTION_STRING_PROD}
EOF
  
    echo "${FULLNAME}" > "${FULLNAME}/.ruby-gemset"
    cd "$FULLNAME"

    # Add Thecore base gems
    if [[ $APPLICATION_TYPE == "api" ]]
    then
        echo "gem 'model_driven_api', '~> 2.0', require: 'model_driven_api'" >> Gemfile
    elif [[ $APPLICATION_TYPE == "backend" ]]
    then
        echo "gem 'thecore_ui_rails_admin', '~> 2.0', require: 'thecore_ui_rails_admin'" >> Gemfile
    elif [[ $APPLICATION_TYPE == "both" ]]
    then
        echo "gem 'model_driven_api', '~> 2.0', require: 'model_driven_api'" >> Gemfile
        echo "gem 'thecore_ui_rails_admin', '~> 2.0', require: 'thecore_ui_rails_admin'" >> Gemfile
    fi

    # Private GEM Repo
    echo "Would you like to setup a private gem repository or provide an existing one?"
    OPTIONS=("setup" "provide" "none of the above, go on without adding a private repository")
    choose
    if [[ $CHOICE == "setup" ]]
    then
        STOPLOOP=false
        while $STOPLOOP
        do
            while [[ "$GEMURL" == '' ]]
            do
                read -rp "Please provide the gem server URL (i.e. https://www.alchemic.it/gems): " GEMURL
            done 

            while [[ "$USERNAME" == '' ]]
            do
                read -rp "Please provide username for $GEMURL gems repository: " USERNAME
            done 

            while [[ "$PASSWORD" == '' ]]
            do
                read -rp "Please provide the password for $USERNAME: " PASSWORD
            done 

            CREDENTIALS="$(urlencode "$USERNAME"):$(urlencode "$PASSWORD")"
            gem sources -a "${GEMURL/:\/\//:\/\/$CREDENTIALS@}"
            bundle config "$GEMURL" "$CREDENTIALS"

            echo "Would you like to setup more private gems repositories?"
            OPTIONS=("yes" "no")
            choose
            if [[ $CHOICE == "no" ]]
            then
                STOPLOOP=true
            fi
        done
    elif [[ $CHOICE == "provide" ]]
    then
        # Just add in the Gemfile
        STOPLOOP=false
        while $STOPLOOP
        do
            echo "Write here the URL of the private GEMs repository"
            read -r
            echo "Is GEMs URL $REPLY correct?"
            OPTIONS=("yes" "no")
            choose
            if [[ $CHOICE == "yes" ]]
            then
                echo "source '$REPLY'" >> Gemfile
            fi
            echo "Would you like to add more private gems repositories?"
            OPTIONS=("yes" "no")
            choose
            if [[ $CHOICE == "no" ]]
            then
                STOPLOOP=true
            fi
        done
        
    fi

    # Asking for more gems
    echo "Do you want to add more gems to the App?"
    OPTIONS=("yes" "no")
    choose
    if [[ $CHOICE == "yes" ]]
    then
        STOPLOOP=false
        while $STOPLOOP
        do
            echo "Please add the name and the semver of the gem."
            echo "For example: thecore_background_jobs 2.0"
            echo "this will be translated to gem 'thecore_background_jobs', '~> 2.0', require: 'thecore_background_jobs'"
            read -r GEMNAME VERSION
            echo "Are the gem name and version correct? $GEMNAME $VERSION"
            OPTIONS=("yes" "no" "exit")
            choose
            if [[ $CHOICE == "yes" ]]
            then
                echo "gem '$GEMNAME', '~> $VERSION', require: '$GEMNAME'" >> Gemfile
            fi
            echo "Would you like to add more gems?"
            OPTIONS=("yes" "no")
            choose
            if [[ $CHOICE == "no" ]]
            then
                STOPLOOP=true
            fi
        done
    fi

    bundle install
    rails active_storage:install
    rails action_text:install
    yarn install
    rails db:migrate

    git init
    cat <<EOF | tee .gitignore
# Created by https://www.gitignore.io/api/osx,code,ruby,rails,linux,macos,windows,sublimetext
# Edit at https://www.gitignore.io/?templates=osx,code,ruby,rails,linux,macos,windows,sublimetext

### Code ###
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

### Linux ###
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### OSX ###
# General

# Icon must end with two \r

# Thumbnails

# Files that might appear in the root of a volume

# Directories potentially created on remote AFP share

### Rails ###
*.rbc
capybara-*.html
.rspec
/db/*.sqlite3
/db/*.sqlite3-journal
/public/system
/coverage/
/spec/tmp
*.orig
rerun.txt
pickle-email-*.html

# Ignore all logfiles and tempfiles.
/log/*
/tmp/*
!/log/.keep
!/tmp/.keep
*.log 

# TODO Comment out this rule if you are OK with secrets being uploaded to the repo
config/initializers/secret_token.rb
config/master.key

# Only include if you have production secrets in this file, which is no longer a Rails default
# config/secrets.yml

# dotenv
# TODO Comment out this rule if environment variables can be committed
.env

## Environment normalization:
/.bundle
/vendor/bundle

# these should all be checked in to normalize the environment:
Gemfile.lock
#, .ruby-version, .ruby-gemset

# unless supporting rvm < 1.11.0 or doing something fancy, ignore this:
.rvmrc

# if using bower-rails ignore default bower_components path bower.json files
/vendor/assets/bower_components
*.bowerrc
bower.json

# Ignore pow environment settings
.powenv

# Ignore Byebug command history file.
.byebug_history

# Ignore node_modules
node_modules/

# Ignore precompiled javascript packs
/public/packs
/public/packs-test
/public/assets

# Ignore yarn files
/yarn-error.log
yarn-debug.log*
.yarn-integrity

# Ignore uploaded files in development
/storage/*
!/storage/.keep

### Ruby ###
*.gem
/.config
/InstalledFiles
/pkg/
/spec/reports/
/spec/examples.txt
/test/tmp/
/test/version_tmp/
/tmp/

# Used by dotenv library to load environment variables.
# .env

# Ignore Byebug command history file.

## Specific to RubyMotion:
.dat*
.repl_history
build/
*.bridgesupport
build-iPhoneOS/
build-iPhoneSimulator/

## Specific to RubyMotion (use of CocoaPods):
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
# vendor/Pods/

## Documentation cache and generated files:
/.yardoc/
/_yardoc/
/doc/
/rdoc/

/.bundle/
/lib/bundler/man/

# for a library or gem, you might want to ignore these files since the code is
# intended to run in multiple environments; otherwise, check them in:
# Gemfile.lock
# .ruby-version
# .ruby-gemset

# unless supporting rvm < 1.11.0 or doing something fancy, ignore this:

### Ruby Patch ###
# Used by RuboCop. Remote config files pulled in from inherit_from directive.
# .rubocop-https?--*

### SublimeText ###
# Cache files for Sublime Text
*.tmlanguage.cache
*.tmPreferences.cache
*.stTheme.cache

# Workspace files are user-specific
*.sublime-workspace

# Project files should be checked into the repository, unless a significant
# proportion of contributors will probably not be using Sublime Text
# *.sublime-project

# SFTP configuration file
sftp-config.json

# Package control specific files
Package Control.last-run
Package Control.ca-list
Package Control.ca-bundle
Package Control.system-ca-bundle
Package Control.cache/
Package Control.ca-certs/
Package Control.merged-ca-bundle
Package Control.user-ca-bundle
oscrypto-ca-bundle.crt
bh_unicode_properties.cache

# Sublime-github package stores a github token in this file
# https://packagecontrol.io/packages/sublime-github
GitHub.sublime-settings

### Windows ###
# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# End of https://www.gitignore.io/api/osx,code,ruby,rails,linux,macos,windows,sublimetext

.passwords
*.lock
*.sqlite3
schema.rb
development_secret.txt
*.log
*.pid
*.sqlite
*.sqlite3
tmp
EOF

    git add . -A
    git commit -a -m"Initial Git"
    echo "Would you like to add a remote git repository?"
    OPTIONS=("yes" "no")
    choose
    if [[ $CHOICE == "no" ]]
    then
        STOPLOOP=false
        while $STOPLOOP
        do
            read -r
            echo "Is the connection string $REPLY correct?"
            OPTIONS=("yes" "no")
            choose
            if [[ $CHOICE == "yes" ]]
            then
                git remote origin add "${REPLY}"
                STOPLOOP=true
            fi
        done
    fi
    cd ..
else
    echo "ERROR! The name can only contain lowercase letters, - and _" 
    exit 1
fi

echo "New Thecore App: ${FULLNAME} created."

exit 0
