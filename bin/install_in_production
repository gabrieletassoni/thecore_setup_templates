#!/bin/bash -e

# APP NAME
while [[ $APPNAME == '' ]]
do
    read -p "Please enter this WebApp name: " APPNAME
done 

# GIT CLONE
while [[ $GITURL == '' ]]
do
    read -p "Please provide the git server domain (i.e. www.taris.it): " GITURL
done 

mkdir -p ~/www/rails
cd ~/www/rails/
git clone "$GITURL"
cd "$APPNAME"

# POSTGRESQL
sudo -u postgres -- psql -c "CREATE USER $APPNAME WITH PASSWORD '$APPNAME';"
sudo -u postgres -- createdb "$APPNAME"
sudo -u postgres -- psql -c "grant all privileges on database $APPNAME to $APPNAME"

# WEBAPP PRODUCTION DB
cat <<EOM | tee config/database.yml
production:
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # http://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  database: $APPNAME
  username: $APPNAME
  password: $APPNAME
EOM

while ! [[ "$YN" =~ ^(y|n)$ ]]
do
    read -p "Would you like to setup a private gem repository? (y|n) " YN
done

if [[ $YN == "y"]]
then
    while [[ $GEMURL == '' ]]
    do
        read -p "Please provide the gem server URL (i.e. https://www.alchemic.it/gems): " GEMURL
    done 

    while [[ $USERNAME == '' ]]
    do
        read -p "Please provide username for $GEMURL gems repository: " USERNAME
    done 

    while [[ $PASSWORD == '' ]]
    do
        read -p "Please provide the password for $USERNAME: " PASSWORD
    done 

    CREDENTIALS="$(urlencode $USERNAME):$(urlencode $PASSWORD)"
    gem sources -a "${GEMURL/:\/\//:\/\/$CREDENTIALS@}"
    bundle config $GEMURL $CREDENTIALS
fi

# Installing the APP
while [[ $MASTERKEY == '' ]]
do
    read -p "Please enter the master key used to create credentials.key.inc: " MASTERKEY
done

printf "$MASTERKEY" > config/master.key

bundle install
RAILS_ENV=production bundle exec rails db:migrate
RAILS_ENV=production bundle exec rails assets:precompile RAILS_RELATIVE_URL_ROOT="/$APPNAME"

# APACHE CONFIG
while [[ $RAILSURL == '' ]]
do
    read -p "Please provide the url to access this webapp (i.e. https://www.taris.it/dev/myapp):" APPURL
done 

# Scan the url
# extract the protocol
APPPROTO="$(echo $APPURL | grep :// | sed -e's,^\(.*://\).*,\1,g')"
# remove the protocol
APPFQDN="$(echo ${APPURL/$APPPROTO/})"
# extract the user (if any)
APPUSER="$(echo $APPFQDN | grep @ | cut -d@ -f1)"
# extract the host and port
APPHOSTPORT="$(echo ${APPFQDN/$APPUSER@/} | cut -d/ -f1)"
# by request host without port    
APPHOST="$(echo $APPHOSTPORT | sed -e 's,:.*,,g')"
# by request - try to extract the port
APPPORT="$(echo $APPHOSTPORT | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')"
# extract the path (if any)
APPPATH="$(echo $APPFQDN | grep / | cut -d/ -f2-)"

CURDIR=$(pwd)
CURRUBYVER=$(cat $CURDIR/.ruby-version)
CURGEMSET=$(cat $CURDIR/.ruby-gemset)
PASSENGERRUBY="$HOME/.rvm/gems/$CURRUBYVER@$CURGEMSET/wrappers/ruby"
cat <<EOM | sudo tee /etc/apache2/sites-available/$APPNAME.conf
<VirtualHost *:443>
    ServerName $APPHOST
    Alias /$APPPATH $CURDIR/public
    <Location /$APPPATH>
            PassengerBaseURI /$APPPATH
            PassengerAppRoot $CURDIR
            PassengerRuby $PASSENGERRUBY
            PassengerFriendlyErrorPages on
	        RedirectMatch ^/ckeditor_assets/(.*)$ /dev/scrumthemall/ckeditor_assets/$1
        	RedirectMatch ^/assets/ckeditor/(.*)$ /dev/scrumthemall/assets/ckeditor/$1
        	RedirectMatch ^/ckeditor/(.*)$ /dev/scrumthemall/ckeditor/$1
    </Location>
    <Directory $CURDIR/public>
            # Always set these headers.
            Header always set Access-Control-Allow-Origin "*"
            Header always set Access-Control-Allow-Methods "POST, GET, OPTIONS, DELETE, PUT"
            Header always set Access-Control-Max-Age "1000"
            Header always set Access-Control-Allow-Headers "x-requested-with, Content-Type, origin, authorization, accept, client-security-token"
            # Added a rewrite to respond with a 200 SUCCESS on every OPTIONS request.
            RewriteEngine On
            RewriteCond %{REQUEST_METHOD} OPTIONS
            RewriteRule ^(.*)$ $1 [R=200,L]
            # Rails definitions
            RailsEnv production
            SetEnv RAILS_RELATIVE_URL_ROOT /$APPPATH
            SetEnv RAILS_URL $APPPROTO$APPHOST
            Allow from all
            Options -MultiViews
            Require all granted
    </Directory>
</VirtualHost>
EOM

sudo a2ensite $APPNAME
sudo service apache2 restart
